<!--Copyright (c) Josef Pihrt. All rights reserved. Licensed under the Apache License, Version 2.0.-->
<CodeSnippet Format="1.1.0" xmlns="http://schemas.microsoft.com/VisualStudio/2005/CodeSnippet">
  <Header>
    <Title>DiagnosticAnalyzer Class</Title>
    <Shortcut>c_</Shortcut>
    <Description>Class derived from DiagnosticAnalyzer.</Description>
    <Author>Josef Pihrt</Author>
    <SnippetTypes>
      <SnippetType>Expansion</SnippetType>
    </SnippetTypes>
  </Header>
  <Snippet>
    <Imports>
      <Import>
        <Namespace>System</Namespace>
      </Import>
      <Import>
        <Namespace>System.Collections.Immutable</Namespace>
      </Import>
      <Import>
        <Namespace>Microsoft.CodeAnalysis</Namespace>
      </Import>
      <Import>
        <Namespace>Microsoft.CodeAnalysis.CSharp</Namespace>
      </Import>
      <Import>
        <Namespace>Microsoft.CodeAnalysis.CSharp.Syntax</Namespace>
      </Import>
      <Import>
        <Namespace>Microsoft.CodeAnalysis.Diagnostics</Namespace>
      </Import>
    </Imports>
    <Declarations>
      <Literal>
        <ID>analyzeSyntaxNode</ID>
        <ToolTip>analyzeSyntaxNode method name</ToolTip>
        <Default>AnalyzeSyntaxNode</Default>
      </Literal>
      <Literal>
        <ID>baseDiagnosticAnalyzer</ID>
        <ToolTip>Base diagnostic analyzer name</ToolTip>
        <Default>DiagnosticAnalyzer</Default>
      </Literal>
      <Literal>
        <ID>descriptor</ID>
        <ToolTip>Diagnostic descriptor</ToolTip>
        <Default>DiagnosticDescriptor</Default>
      </Literal>
      <Literal>
        <ID>kind</ID>
        <ToolTip>Syntax kind</ToolTip>
        <Default>SyntaxKind</Default>
      </Literal>
      <Literal>
        <ID>language</ID>
        <ToolTip>Language name</ToolTip>
        <Default>.CSharp</Default>
      </Literal>
      <Literal>
        <ID>name</ID>
        <ToolTip>CodeFixProvider name</ToolTip>
        <Default>Name</Default>
      </Literal>
    </Declarations>
    <Code Language="CSharp"><![CDATA[[DiagnosticAnalyzer(LanguageNames$language$)]
public class $name$DiagnosticAnalyzer : $baseDiagnosticAnalyzer$
{
    public override ImmutableArray<DiagnosticDescriptor> SupportedDiagnostics
    {
        get { return ImmutableArray.Create($descriptor$); }
    }

    public override void Initialize(AnalysisContext context)
    {
        if (context == null)
            throw new ArgumentNullException(nameof(context));

        //context.RegisterSyntaxTreeAction(f => AnalyzeSyntaxTree(f));
        //context.RegisterSymbolAction(f => AnalyzeSymbol(f), SymbolKind);
        context.RegisterSyntaxNodeAction(f => $analyzeSyntaxNode$(f), $kind$);
    }

    //private void AnalyzeSyntaxTree(SyntaxTreeAnalysisContext context)
    //private void AnalyzeSymbol(SymbolAnalysisContext context)
    private void $analyzeSyntaxNode$(SyntaxNodeAnalysisContext context)
    {
        Diagnostic diagnostic = Diagnostic.Create(
            $descriptor$,
            context.Node.GetLocation());

        context.ReportDiagnostic(diagnostic);
    }
}$end$]]></Code>
  </Snippet>
</CodeSnippet>