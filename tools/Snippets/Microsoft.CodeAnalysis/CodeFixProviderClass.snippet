<!--Copyright (c) Josef Pihrt. All rights reserved. Licensed under the Apache License, Version 2.0.-->
<CodeSnippet Format="1.1.0" xmlns="http://schemas.microsoft.com/VisualStudio/2005/CodeSnippet">
  <Header>
    <Title>CodeFixProvider Class</Title>
    <Shortcut>_codefixprovider</Shortcut>
    <Description>Class derived from CodeFixProvider.</Description>
    <Author>Josef Pihrt</Author>
    <SnippetTypes>
      <SnippetType>Expansion</SnippetType>
    </SnippetTypes>
  </Header>
  <Snippet>
    <Imports>
      <Import>
        <Namespace>System.Collections.Immutable</Namespace>
      </Import>
      <Import>
        <Namespace>System.Composition</Namespace>
      </Import>
      <Import>
        <Namespace>System.Threading</Namespace>
      </Import>
      <Import>
        <Namespace>System.Threading.Tasks</Namespace>
      </Import>
      <Import>
        <Namespace>Microsoft.CodeAnalysis</Namespace>
      </Import>
      <Import>
        <Namespace>Microsoft.CodeAnalysis.CodeActions</Namespace>
      </Import>
      <Import>
        <Namespace>Microsoft.CodeAnalysis.CodeFixes</Namespace>
      </Import>
      <Import>
        <Namespace>Microsoft.CodeAnalysis.CSharp</Namespace>
      </Import>
      <Import>
        <Namespace>Microsoft.CodeAnalysis.CSharp.Syntax</Namespace>
      </Import>
      <Import>
        <Namespace>Microsoft.CodeAnalysis.Formatting</Namespace>
      </Import>
    </Imports>
    <Declarations>
      <Literal>
        <ID>baseCodeFixProvider</ID>
        <ToolTip>Base code fix provider name</ToolTip>
        <Default>CodeFixProvider</Default>
      </Literal>
      <Literal>
        <ID>createChangedDocument</ID>
        <ToolTip>createChangedDocument method name</ToolTip>
        <Default>CreateChangedDocument</Default>
      </Literal>
      <Literal>
        <ID>id</ID>
        <ToolTip>Diagnostic identifier</ToolTip>
        <Default>DiagnosticId</Default>
      </Literal>
      <Literal>
        <ID>identifier</ID>
        <ToolTip>Identifier name</ToolTip>
        <Default>node</Default>
      </Literal>
      <Literal>
        <ID>language</ID>
        <ToolTip>Language name</ToolTip>
        <Default>.CSharp</Default>
      </Literal>
      <Literal>
        <ID>name</ID>
        <ToolTip>CodeFixProvider name</ToolTip>
        <Default>Name</Default>
      </Literal>
      <Literal>
        <ID>node</ID>
        <ToolTip>Syntax type name</ToolTip>
        <Default>SyntaxNode</Default>
      </Literal>
      <Literal>
        <ID>title</ID>
        <ToolTip>Diagnostic title</ToolTip>
        <Default>Title</Default>
      </Literal>
    </Declarations>
    <Code Language="CSharp"><![CDATA[[ExportCodeFixProvider(LanguageNames$language$, Name = nameof($name$CodeFixProvider))]
[Shared]
public class $name$CodeFixProvider : $baseCodeFixProvider$
{
    public sealed override ImmutableArray<string> FixableDiagnosticIds
    {
        get { return ImmutableArray.Create($id$); }
    }

    public sealed override FixAllProvider GetFixAllProvider()
    {
        return WellKnownFixAllProviders.BatchFixer;
    }

    public sealed override async Task RegisterCodeFixesAsync(CodeFixContext context)
    {
        SyntaxNode root = await context.Document.GetSyntaxRootAsync(context.CancellationToken).ConfigureAwait(false);

        $node$ $identifier$ = root.FindNode(context.Span, getInnermostNodeForTie: true)?.FirstAncestorOrSelf<$node$>();

        if ($identifier$ == null)
            return;

        CodeAction codeAction = CodeAction.Create(
            "$title$",
            cancellationToken => $createChangedDocument$Async(context.Document, $identifier$, cancellationToken),
            $id$);

        context.RegisterCodeFix(codeAction, context.Diagnostics);

        //foreach (Diagnostic diagnostic in context.Diagnostics)
        //{
        //    switch (diagnostic.Id)
        //    {
        //        case $id$:
        //            {
        //                CodeAction codeAction = CodeAction.Create(
        //                    "$title$",
        //                    cancellationToken => $createChangedDocument$Async(context.Document, $identifier$, cancellationToken),
        //                    diagnostic.Id);

        //                context.RegisterCodeFix(codeAction, diagnostic);

        //                break;
        //            }
        //    }
        //}
    }

    private static async Task<Document> $createChangedDocument$Async(Document document, $node$ $identifier$, CancellationToken cancellationToken)
    {
        SyntaxNode root = await document.GetSyntaxRootAsync(cancellationToken).ConfigureAwait(false);

        $node$ newNode = $identifier$
            .WithAdditionalAnnotations(Formatter.Annotation);

        root = root.ReplaceNode($identifier$, newNode);

        return document.WithSyntaxRoot(root);
    }
}$end$]]></Code>
  </Snippet>
</CodeSnippet>