// Copyright (c) Josef Pihrt. All rights reserved. Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.

using System;
using System.IO;
using System.Text.RegularExpressions;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.Diagnostics;

namespace Pihrtsoft.CodeAnalysis
{
    public class GeneratedCodeAnalyzer : IGeneratedCodeAnalyzer
    {
        private static readonly StringComparison _comparison = StringComparison.OrdinalIgnoreCase;

        private static readonly Regex _autoGeneratedCommentRegex = new Regex(
@"
(?>
    \A
    //
    \s+
    <auto-generated>
)
", RegexOptions.IgnorePatternWhitespace);

        public virtual bool IsGeneratedCode(CodeBlockAnalysisContext context)
            => IsGeneratedCode(context.CodeBlock.SyntaxTree);

        public virtual bool IsGeneratedCode(SyntaxNodeAnalysisContext context)
            => IsGeneratedCode(context.Node.SyntaxTree);

        public virtual bool IsGeneratedCode(SyntaxTreeAnalysisContext context)
            => IsGeneratedCode(context.Tree);

        public virtual bool IsGeneratedCode(SymbolAnalysisContext context)
            => IsGeneratedCode(context.Symbol);

        public static bool IsGeneratedCode(SyntaxTree tree)
        {
            if (tree == null)
                throw new ArgumentNullException(nameof(tree));

            if (IsGeneratedCodeFile(tree.FilePath))
                return true;

            if (BeginsWithAutoGeneratedComment(tree))
                return true;

            return false;
        }

        private static bool IsGeneratedCode(ISymbol symbol)
        {
            for (int i = 0; i < symbol.DeclaringSyntaxReferences.Length; i++)
            {
                if (IsGeneratedCode(symbol.DeclaringSyntaxReferences[i].SyntaxTree))
                    return true;
            }

            return false;
        }

        public static bool IsGeneratedCodeFile(string filePath)
        {
            if (string.IsNullOrEmpty(filePath))
                return false;

            string fileName = Path.GetFileName(filePath);

            if (fileName.StartsWith("TemporaryGeneratedFile_", _comparison))
                return true;

            string extension = Path.GetExtension(fileName);

            if (string.IsNullOrEmpty(extension))
                return false;

            string fileNameWithoutExtension = Path.GetFileNameWithoutExtension(fileName);

            if (string.Equals(fileNameWithoutExtension, "AssemblyInfo", _comparison))
                return true;

            if (fileNameWithoutExtension.EndsWith(".Designer", _comparison))
                return true;

            if (fileNameWithoutExtension.EndsWith(".Generated", _comparison))
                return true;

            if (fileNameWithoutExtension.EndsWith(".g", _comparison))
                return true;

            if (fileNameWithoutExtension.EndsWith(".g.i", _comparison))
                return true;

            if (fileNameWithoutExtension.EndsWith(".AssemblyAttributes", _comparison))
                return true;

            return false;
        }

        public static bool BeginsWithAutoGeneratedComment(SyntaxTree tree)
        {
            if (tree == null)
                throw new ArgumentNullException(nameof(tree));

            SyntaxNode root;
            if (!tree.TryGetRoot(out root))
                return false;

            if (root?.Kind() == SyntaxKind.CompilationUnit && root.HasLeadingTrivia)
            {
                foreach (SyntaxTrivia trivia in root.GetLeadingTrivia())
                {
                    if (trivia.Kind() == SyntaxKind.SingleLineCommentTrivia
                        && _autoGeneratedCommentRegex.IsMatch(trivia.ToString()))
                    {
                        return true;
                    }
                }
            }

            return false;
        }
    }
}
