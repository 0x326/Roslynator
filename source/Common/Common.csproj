<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="14.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <Import Project="$(MSBuildExtensionsPath)\$(MSBuildToolsVersion)\Microsoft.Common.props" Condition="Exists('$(MSBuildExtensionsPath)\$(MSBuildToolsVersion)\Microsoft.Common.props')" />
  <PropertyGroup>
    <MinimumVisualStudioVersion>11.0</MinimumVisualStudioVersion>
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
    <ProjectGuid>{4962F905-0065-4A06-AC26-7926FF1D2BAE}</ProjectGuid>
    <OutputType>Library</OutputType>
    <AppDesignerFolder>Properties</AppDesignerFolder>
    <RootNamespace>Roslynator</RootNamespace>
    <AssemblyName>Roslynator.Common</AssemblyName>
    <ProjectTypeGuids>{786C830F-07A1-408B-BD7F-6EE04809D6DB};{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}</ProjectTypeGuids>
    <TargetFrameworkProfile>Profile7</TargetFrameworkProfile>
    <TargetFrameworkVersion>v4.5</TargetFrameworkVersion>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Debug|AnyCPU' ">
    <DebugSymbols>true</DebugSymbols>
    <DebugType>full</DebugType>
    <Optimize>false</Optimize>
    <OutputPath>bin\Debug\</OutputPath>
    <DefineConstants>DEBUG;TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
    <CodeAnalysisRuleSet>..\global.ruleset</CodeAnalysisRuleSet>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Release|AnyCPU' ">
    <DebugType>pdbonly</DebugType>
    <Optimize>true</Optimize>
    <OutputPath>bin\Release\</OutputPath>
    <DefineConstants>TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
    <CodeAnalysisRuleSet>..\global.ruleset</CodeAnalysisRuleSet>
  </PropertyGroup>
  <PropertyGroup>
    <SignAssembly>true</SignAssembly>
  </PropertyGroup>
  <PropertyGroup>
    <AssemblyOriginatorKeyFile>Roslynator.Common.snk</AssemblyOriginatorKeyFile>
  </PropertyGroup>
  <ItemGroup>
    <Compile Include="CSharp\Refactorings\AddCastExpressionRefactoring.cs" />
    <Compile Include="CSharp\Refactorings\ChangeAccessibilityRefactoring.cs" />
    <Compile Include="CSharp\Refactorings\IntroduceFieldRefactoring.cs" />
    <Compile Include="CSharp\Refactorings\IntroduceLocalVariableRefactoring.cs" />
    <Compile Include="CSharp\Refactorings\RefactoringHelper.cs" />
    <Compile Include="CSharp\Refactorings\CallExtensionMethodAsInstanceMethodRefactoring.cs" />
    <Compile Include="CSharp\Refactorings\ReplaceAsWithCastRefactoring.cs" />
    <Compile Include="CSharp\Refactorings\UseConstantInsteadOfFieldRefactoring.cs" />
    <Compile Include="CSharp\Refactorings\UseElementAccessInsteadOfElementAtRefactoring.cs" />
    <Compile Include="CSharp\Refactorings\UseElementAccessInsteadOfFirstRefactoring.cs" />
    <Compile Include="CSharp\Refactorings\UseElementAccessInsteadOfLastRefactoring.cs" />
    <Compile Include="CSharp\Refactorings\AddBracesToSwitchSectionRefactoring.cs" />
    <Compile Include="CSharp\Refactorings\AddExceptionToDocumentationComment\AddExceptionToDocumentationCommentAnalysis.cs" />
    <Compile Include="CSharp\Refactorings\AddExceptionToDocumentationComment\AddExceptionToDocumentationCommentRefactoring.cs" />
    <Compile Include="CSharp\Refactorings\AddExceptionToDocumentationComment\ThrowInfo.cs" />
    <Compile Include="CSharp\Refactorings\AddExceptionToDocumentationComment\ThrowStatementInfo.cs" />
    <Compile Include="CSharp\Refactorings\AnalysisOptions.cs" />
    <Compile Include="CSharp\Refactorings\AnalysisOptionsExtensions.cs" />
    <Compile Include="CSharp\Refactorings\If\IfAnalysisOptions.cs" />
    <Compile Include="CSharp\Refactorings\If\IfElseToAssignmentWithCoalesceExpression.cs" />
    <Compile Include="CSharp\Refactorings\If\IfElseToAssignmentWithConditionalExpression.cs" />
    <Compile Include="CSharp\Refactorings\If\AssignmentAndIfElseToAssignmentWithConditionalExpression.cs" />
    <Compile Include="CSharp\Refactorings\If\LocalDeclarationAndIfElseAssignmentWithConditionalExpression.cs" />
    <Compile Include="CSharp\Refactorings\If\IfRefactoring.cs" />
    <Compile Include="CSharp\Refactorings\If\IfRefactoringHelper.cs" />
    <Compile Include="CSharp\Refactorings\If\IfReturnToReturnWithBooleanExpression.cs" />
    <Compile Include="CSharp\Refactorings\If\IfReturnToReturnWithCoalesceExpression.cs" />
    <Compile Include="CSharp\Refactorings\If\IfReturnToReturnWithConditionalExpression.cs" />
    <Compile Include="CSharp\Refactorings\If\ToAssignmentWithConditionalExpression`1.cs" />
    <Compile Include="CSharp\Refactorings\If\ToAssignmentWithConditionalExpression.cs" />
    <Compile Include="CSharp\Refactorings\RefactoringKind.cs" />
    <Compile Include="CSharp\Refactorings\If\IfElseToReturnWithCoalesceExpression.cs" />
    <Compile Include="CSharp\Refactorings\If\IfToReturnWithBooleanExpression.cs" />
    <Compile Include="CSharp\Refactorings\If\IfElseToReturnWithBooleanExpression.cs" />
    <Compile Include="CSharp\Refactorings\If\IfToReturnWithCoalesceExpression.cs" />
    <Compile Include="CSharp\Refactorings\If\IfToReturnWithConditionalExpression.cs" />
    <Compile Include="CSharp\Refactorings\If\IfElseToReturnWithConditionalExpression.cs" />
    <Compile Include="CSharp\Refactorings\If\IfElseToYieldReturnWithBooleanExpression.cs" />
    <Compile Include="CSharp\Refactorings\If\IfElseToYieldReturnWithCoalesceExpression.cs" />
    <Compile Include="CSharp\Refactorings\If\IfElseToYieldReturnWithConditionalExpression.cs" />
    <Compile Include="CSharp\Refactorings\ExpandExpressionBodyRefactoring.cs" />
    <Compile Include="CSharp\Refactorings\ExtractTypeDeclarationToNewDocumentRefactoring.cs" />
    <Compile Include="CSharp\Refactorings\IntroduceFieldToLockOnRefactoring.cs" />
    <Compile Include="CSharp\Refactorings\MarkContainingClassAsAbstractRefactoring.cs" />
    <Compile Include="CSharp\Refactorings\MergeInterpolationIntoInterpolatedStringRefactoring.cs" />
    <Compile Include="CSharp\Refactorings\UseBitwiseOperationInsteadOfCallingHasFlagRefactoring.cs" />
    <Compile Include="CSharp\Refactorings\CallConfigureAwaitRefactoring.cs" />
    <Compile Include="CSharp\Refactorings\UseLambdaExpressionInsteadOfAnonymousMethodRefactoring.cs" />
    <Compile Include="CSharp\Refactorings\AddBracesToIfElseRefactoring.cs" />
    <Compile Include="CSharp\Refactorings\ExpandAssignmentExpressionRefactoring.cs" />
    <Compile Include="CSharp\Refactorings\UseCompoundAssignmentRefactoring.cs" />
    <Compile Include="CSharp\Refactorings\AttributeRefactoring.cs" />
    <Compile Include="CSharp\Refactorings\ReplaceForEachWithForRefactoring.cs" />
    <Compile Include="CSharp\Refactorings\ReplaceInterpolatedStringWithStringLiteralRefactoring.cs" />
    <Compile Include="CSharp\Refactorings\DuplicateMemberDeclarationRefactoring.cs" />
    <Compile Include="CSharp\Refactorings\RemoveBracesFromIfElseElseRefactoring.cs" />
    <Compile Include="CSharp\Refactorings\UseEmptyStringLiteralInsteadOfStringEmptyRefactoring.cs" />
    <Compile Include="CSharp\Refactorings\SimplifyLambdaExpressionRefactoring.cs" />
    <Compile Include="CSharp\Refactorings\SplitVariableDeclarationRefactoring.cs" />
    <Compile Include="CSharp\Refactorings\UseExpressionBodiedMemberRefactoring.cs" />
    <Compile Include="CSharp\Refactorings\InlineAliasExpressionRefactoring.cs" />
    <Compile Include="CSharp\Refactorings\ChangeTypeRefactoring.cs" />
    <Compile Include="Properties\AssemblyInfo.cs" />
  </ItemGroup>
  <ItemGroup>
    <None Include="app.config" />
    <None Include="packages.config">
      <SubType>Designer</SubType>
    </None>
    <None Include="Roslynator.Common.snk" />
  </ItemGroup>
  <ItemGroup>
    <Reference Include="Microsoft.CodeAnalysis, Version=1.3.1.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35, processorArchitecture=MSIL">
      <HintPath>..\packages\Microsoft.CodeAnalysis.Common.1.3.1\lib\portable-net45+win8\Microsoft.CodeAnalysis.dll</HintPath>
    </Reference>
    <Reference Include="Microsoft.CodeAnalysis.CSharp, Version=1.3.1.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35, processorArchitecture=MSIL">
      <HintPath>..\packages\Microsoft.CodeAnalysis.CSharp.1.3.1\lib\portable-net45+win8\Microsoft.CodeAnalysis.CSharp.dll</HintPath>
    </Reference>
    <Reference Include="Microsoft.CodeAnalysis.CSharp.Workspaces, Version=1.3.1.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35, processorArchitecture=MSIL">
      <HintPath>..\packages\Microsoft.CodeAnalysis.CSharp.Workspaces.1.3.1\lib\portable-net45+win8\Microsoft.CodeAnalysis.CSharp.Workspaces.dll</HintPath>
    </Reference>
    <Reference Include="Microsoft.CodeAnalysis.Workspaces, Version=1.3.1.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35, processorArchitecture=MSIL">
      <HintPath>..\packages\Microsoft.CodeAnalysis.Workspaces.Common.1.3.1\lib\portable-net45+win8\Microsoft.CodeAnalysis.Workspaces.dll</HintPath>
    </Reference>
    <Reference Include="System.Collections.Immutable, Version=1.1.37.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a, processorArchitecture=MSIL">
      <HintPath>..\packages\System.Collections.Immutable.1.1.37\lib\portable-net45+win8+wp8+wpa81\System.Collections.Immutable.dll</HintPath>
    </Reference>
    <Reference Include="System.Composition.AttributedModel, Version=1.0.27.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a, processorArchitecture=MSIL">
      <HintPath>..\packages\Microsoft.Composition.1.0.27\lib\portable-net45+win8+wp8+wpa81\System.Composition.AttributedModel.dll</HintPath>
      <Private>False</Private>
    </Reference>
    <Reference Include="System.Composition.Convention, Version=1.0.27.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a, processorArchitecture=MSIL">
      <HintPath>..\packages\Microsoft.Composition.1.0.27\lib\portable-net45+win8+wp8+wpa81\System.Composition.Convention.dll</HintPath>
      <Private>False</Private>
    </Reference>
    <Reference Include="System.Composition.Hosting, Version=1.0.27.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a, processorArchitecture=MSIL">
      <HintPath>..\packages\Microsoft.Composition.1.0.27\lib\portable-net45+win8+wp8+wpa81\System.Composition.Hosting.dll</HintPath>
      <Private>False</Private>
    </Reference>
    <Reference Include="System.Composition.Runtime, Version=1.0.27.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a, processorArchitecture=MSIL">
      <HintPath>..\packages\Microsoft.Composition.1.0.27\lib\portable-net45+win8+wp8+wpa81\System.Composition.Runtime.dll</HintPath>
      <Private>False</Private>
    </Reference>
    <Reference Include="System.Composition.TypedParts, Version=1.0.27.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a, processorArchitecture=MSIL">
      <HintPath>..\packages\Microsoft.Composition.1.0.27\lib\portable-net45+win8+wp8+wpa81\System.Composition.TypedParts.dll</HintPath>
      <Private>False</Private>
    </Reference>
    <Reference Include="System.Reflection.Metadata, Version=1.2.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a, processorArchitecture=MSIL">
      <HintPath>..\packages\System.Reflection.Metadata.1.2.0\lib\portable-net45+win8\System.Reflection.Metadata.dll</HintPath>
    </Reference>
  </ItemGroup>
  <ItemGroup>
    <Analyzer Include="..\packages\Microsoft.CodeAnalysis.Analyzers.1.1.0\analyzers\dotnet\cs\Microsoft.CodeAnalysis.Analyzers.dll" />
    <Analyzer Include="..\packages\Microsoft.CodeAnalysis.Analyzers.1.1.0\analyzers\dotnet\cs\Microsoft.CodeAnalysis.CSharp.Analyzers.dll" />
  </ItemGroup>
  <ItemGroup>
    <ProjectReference Include="..\Core\Core.csproj">
      <Project>{34a3e42e-2254-4ee7-a152-eedb18e3d7e3}</Project>
      <Name>Core</Name>
    </ProjectReference>
  </ItemGroup>
  <Import Project="$(MSBuildExtensionsPath32)\Microsoft\Portable\v4.6\Microsoft.Portable.CSharp.targets" />
  <Target Name="AfterBuild">
    <GetAssemblyIdentity AssemblyFiles="$(OutDir)\$(AssemblyName).dll">
      <Output TaskParameter="Assemblies" ItemName="AnalyzerAssemblyInfo" />
    </GetAssemblyIdentity>
  </Target>
  <!-- To modify your build process, add your task inside one of the targets below and uncomment it. 
       Other similar extension points exist, see Microsoft.Common.targets.
  <Target Name="BeforeBuild">
  </Target>
  <Target Name="AfterBuild">
  </Target>
  -->
</Project>