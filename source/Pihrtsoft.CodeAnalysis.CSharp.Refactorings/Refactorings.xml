<?xml version="1.0" encoding="utf-8"?>
<Refactorings>
  <!--<Refactoring Id="" Title="" IsEnabledByDefault="true" ExtensionVersion="0.9.0">
    <Syntaxes>
      <Syntax></Syntax>
    </Syntaxes>
    <Scope></Scope>
    <Images>
      <Image></Image>
    </Images>
  </Refactoring>-->
  <Refactoring Id="ReplaceMethodInvocationWithElementAccess" Title="Replace method invocation with '[]'" ExtensionVersion="0.9.40">
    <Syntaxes>
      <Syntax>First/Last/ElementAt method invocation</Syntax>
    </Syntaxes>
    <Scope>method name</Scope>
  </Refactoring>
  <Refactoring Id="AddBooleanComparison" Title="Add boolean comparison" ExtensionVersion="0.9.2">
    <Syntaxes>
      <Syntax>boolean? expression in place where must be boolean expression</Syntax>
    </Syntaxes>
  </Refactoring>
  <Refactoring Id="ReplaceEmbeddedStatementWithBlock" Title="Replace embedded statement with block" ExtensionVersion="0.9.0">
    <Syntaxes>
      <Syntax>do statement</Syntax>
      <Syntax>else clause</Syntax>
      <Syntax>fixed statement</Syntax>
      <Syntax>for statement</Syntax>
      <Syntax>foreach statement</Syntax>
      <Syntax>if statement</Syntax>
      <Syntax>lock statement</Syntax>
      <Syntax>using statement</Syntax>
      <Syntax>while statement</Syntax>
    </Syntaxes>
    <Scope>embedded statement</Scope>
  </Refactoring>
  <Refactoring Id="ReplaceEmbeddedStatementWithBlockInIfElse" Title="Replace embedded statement with block (in if-else)" ExtensionVersion="0.9.0">
    <Syntaxes>
      <Syntax>if-else chain</Syntax>
    </Syntaxes>
    <Scope>topmost if keyword</Scope>
  </Refactoring>
  <Refactoring Id="ReplaceSwitchSectionStatementsWithBlock" Title="Replace switch section statements with block" ExtensionVersion="0.9.0">
    <Syntaxes>
      <Syntax>switch section</Syntax>
    </Syntaxes>
    <Scope>statements</Scope>
  </Refactoring>
  <Refactoring Id="ReplaceStatementsWithBlockInEachSection" Title="Replace statements with block (in each section)" ExtensionVersion="0.9.0">
    <Syntaxes>
      <Syntax>switch statement</Syntax>
    </Syntaxes>
    <Scope>switch keyword</Scope>
  </Refactoring>
  <Refactoring Id=" AddCastExpression" Title="Add cast expression" ExtensionVersion="0.9.0">
    <Syntaxes>
      <Syntax>argument</Syntax>
      <Syntax>assignment expression</Syntax>
      <Syntax>return statement</Syntax>
      <Syntax>variable declaration</Syntax>
    </Syntaxes>
    <Images>
      <Image>AddCastExpressionToArgument</Image>
      <Image>AddCastExpressionToAssignmentExpression</Image>
      <Image>AddCastExpressionToReturnStatement</Image>
      <Image>AddCastExpressionToVariableDeclaration</Image>
    </Images>
  </Refactoring>
  <Refactoring Id="AddInterpolation" Title="Add interpolation" ExtensionVersion="0.9.80">
    <Syntaxes>
      <Syntax>selected text inside interpolated string text</Syntax>
    </Syntaxes>
  </Refactoring>
  <Refactoring Id="AddParameterNameToArgument" Title="Add parameter name to argument" ExtensionVersion="0.9.0">
    <Syntaxes>
      <Syntax>argument list</Syntax>
    </Syntaxes>
  </Refactoring>
  <Refactoring Id="AddParameterNameToParameter" Title="Add parameter name to parameter" ExtensionVersion="0.9.0">
    <Syntaxes>
      <Syntax>parameter</Syntax>
    </Syntaxes>
    <Scope>missing identifier</Scope>
  </Refactoring>
  <Refactoring Id="WrapExpressionInParentheses" Title="Wrap expression in parentheses" ExtensionVersion="0.9.0">
    <Syntaxes>
      <Syntax>selected expression</Syntax>
    </Syntaxes>
  </Refactoring>
  <Refactoring Id="WrapDeclarationInUsingStatement" Title="Wrap declaration in using statement" ExtensionVersion="0.9.0">
    <Syntaxes>
      <Syntax>local declaration of type that implements IDisposable</Syntax>
    </Syntaxes>
  </Refactoring>
  <Refactoring Id="ReplaceAnyWithAllOrAllWithAny" Title="Replace 'Any/All' with 'All/Any'" ExtensionVersion="0.9.2">
    <Syntaxes>
      <Syntax>Any(Func&lt;T, bool&gt; or All(Func&lt;T, bool&gt; from System.Linq.Enumerable namespace</Syntax>
    </Syntaxes>
    <Scope>method name</Scope>
  </Refactoring>
  <Refactoring Id="ReplaceEmptyStringLiteralWithStringEmpty" Title="Replace &quot;&quot; with string.Empty" ExtensionVersion="0.9.0">
    <Syntaxes>
      <Syntax>empty string literal</Syntax>
    </Syntaxes>
  </Refactoring>
  <Refactoring Id="ReplaceConditionalExpressionWithIfElse" Title="Replace conditional expression with if-else" ExtensionVersion="0.9.0">
    <Syntaxes>
      <Syntax>conditional expression</Syntax>
    </Syntaxes>
  </Refactoring>
  <Refactoring Id="ReplaceConstantWithField" Title="Replace constant with field" ExtensionVersion="0.9.0">
    <Syntaxes>
      <Syntax>constant declaration</Syntax>
    </Syntaxes>
  </Refactoring>
  <Refactoring Id="ReplaceForWithForEach" Title="Replace for with foreach" ExtensionVersion="0.9.0">
    <Syntaxes>
      <Syntax>for statement</Syntax>
    </Syntaxes>
  </Refactoring>
  <Refactoring Id="ReplaceForEachWithFor" Title="Replace foreach with for" ExtensionVersion="0.9.0">
    <Syntaxes>
      <Syntax>foreach statement</Syntax>
    </Syntaxes>
  </Refactoring>
  <Refactoring Id="ReplaceInterpolatedStringWithStringLiteral" Title="Replace interpolated string with string literal" ExtensionVersion="0.9.2">
    <Syntaxes>
      <Syntax>Interpolated string without any interpolation</Syntax>
    </Syntaxes>
  </Refactoring>
  <Refactoring Id="ReplaceMethodWithProperty" Title="Replace method with property" IsEnabledByDefault="false" ExtensionVersion="0.9.0">
    <Syntaxes>
      <Syntax>method</Syntax>
    </Syntaxes>
    <Scope>method header</Scope>
  </Refactoring>
  <Refactoring Id="ReplaceFieldWithConstant" Title="Replace field with constant" ExtensionVersion="0.9.0">
    <Syntaxes>
      <Syntax>read-only field</Syntax>
    </Syntaxes>
  </Refactoring>
  <Refactoring Id="ReplacePropertyWithMethod" Title="Replace property with method" ExtensionVersion="0.9.0">
    <Syntaxes>
      <Syntax>read-only property</Syntax>
    </Syntaxes>
    <Scope>property header</Scope>
  </Refactoring>
  <Refactoring Id="ReplaceRegularStringLiteralWithVerbatimStringLiteral" Title="Replace regular string literal with verbatim string literal" ExtensionVersion="0.9.60">
    <Syntaxes>
      <Syntax>regular string literal</Syntax>
    </Syntaxes>
  </Refactoring>
  <Refactoring Id="ReplaceStringLiteralWithCharacterLiteral" Title="Replace string literal with character literal" ExtensionVersion="0.9.70">
    <Syntaxes>
      <Syntax>string literal</Syntax>
    </Syntaxes>
  </Refactoring>
  <Refactoring Id="ReplaceStringLiteralWithInterpolatedString" Title="Replace string literal with interpolated string" ExtensionVersion="0.9.2">
    <Syntaxes>
      <Syntax>string literal</Syntax>
    </Syntaxes>
  </Refactoring>
  <Refactoring Id="ReplaceStringEmptyWithEmptyStringLiteral" Title="Replace string.Empty with &quot;&quot;" ExtensionVersion="0.9.0">
    <Syntaxes>
      <Syntax>string.Empty</Syntax>
    </Syntaxes>
  </Refactoring>
  <Refactoring Id="ReplaceSwitchWithIfElse" Title="Replace switch with if-else" ExtensionVersion="0.9.0">
    <Syntaxes>
      <Syntax>switch statement</Syntax>
    </Syntaxes>
    <Scope>switch keyword</Scope>
  </Refactoring>
  <Refactoring Id="ReplaceIncrementOperatorWithDecrementOperator" Title="Replace increment operator with decrement operator" ExtensionVersion="0.9.0">
    <Syntaxes>
      <Syntax>prefix/postfix unary expression</Syntax>
    </Syntaxes>
  </Refactoring>
  <Refactoring Id="ReplaceStringFormatWithInterpolatedString" Title="Replace string.Format with interpolated string" ExtensionVersion="0.9.0">
    <Syntaxes>
      <Syntax>string.Format method</Syntax>
    </Syntaxes>
  </Refactoring>
  <Refactoring Id="ReplacePrefixOperatorWithPostfixOperator" Title="Replace prefix operator to postfix operator" ExtensionVersion="0.9.0">
    <Syntaxes>
      <Syntax>prefix/postfix unary expression</Syntax>
    </Syntaxes>
  </Refactoring>
  <Refactoring Id="ReplaceVerbatimStringLiteralWithRegularStringLiteral" Title="Replace verbatim string literal with regular string literal" ExtensionVersion="0.9.60">
    <Syntaxes>
      <Syntax>verbatim string literal</Syntax>
    </Syntaxes>
  </Refactoring>
  <Refactoring Id="ReplaceVerbatimStringLiteralWithRegularStringLiterals" Title="Replace verbatim string literal with regular string literals" ExtensionVersion="0.9.60">
    <Syntaxes>
      <Syntax>multiline verbatim string literal</Syntax>
    </Syntaxes>
  </Refactoring>
  <Refactoring Id="DuplicateArgument" Title="Duplicate argument" ExtensionVersion="0.9.60">
    <Syntaxes>
      <Syntax>missing argument</Syntax>
    </Syntaxes>
  </Refactoring>
  <Refactoring Id="DuplicateMember" Title="Duplicate member" ExtensionVersion="0.9.0">
    <Syntaxes>
      <Syntax>method</Syntax>
      <Syntax>constructor</Syntax>
      <Syntax>property</Syntax>
      <Syntax>indexer</Syntax>
      <Syntax>operator</Syntax>
      <Syntax>event</Syntax>
      <Syntax>namespace</Syntax>
      <Syntax>class</Syntax>
      <Syntax>struct</Syntax>
      <Syntax>interface</Syntax>
    </Syntaxes>
    <Scope>opening or closing brace</Scope>
  </Refactoring>
  <Refactoring Id="DuplicateParameter" Title="Duplicate parameter" ExtensionVersion="0.9.40">
    <Syntaxes>
      <Syntax>missing parameter</Syntax>
    </Syntaxes>
  </Refactoring>
  <Refactoring Id="ExpandAssignmentExpression" Title="Expand assignment expression" ExtensionVersion="0.9.0">
    <Syntaxes>
      <Syntax>assignment expression</Syntax>
    </Syntaxes>
    <Scope>operator</Scope>
  </Refactoring>
  <Refactoring Id="ExpandCoalesceExpression" Title="Expand coalesce expression" ExtensionVersion="0.9.50">
    <Syntaxes>
      <Syntax>coalesce expression</Syntax>
    </Syntaxes>
    <Scope>?? operator</Scope>
  </Refactoring>
  <Refactoring Id="ExpandEvent" Title="Expand event" ExtensionVersion="0.9.50">
    <Syntaxes>
      <Syntax>event field declaration</Syntax>
    </Syntaxes>
  </Refactoring>
  <Refactoring Id="ExpandExpressionBodiedMember" Title="Expand expression-bodied member" ExtensionVersion="0.9.0">
    <Syntaxes>
      <Syntax>expression body</Syntax>
    </Syntaxes>
  </Refactoring>
  <Refactoring Id="ExpandLambdaExpressionBody" Title="Expand lambda expression body" ExtensionVersion="0.9.0">
    <Syntaxes>
      <Syntax>lambda expression</Syntax>
    </Syntaxes>
    <Scope>body</Scope>
  </Refactoring>
  <Refactoring Id="ExpandInitializer" Title="Expand initializer" ExtensionVersion="0.9.0">
    <Syntaxes>
      <Syntax>initializer</Syntax>
    </Syntaxes>
  </Refactoring>
  <Refactoring Id="ExpandProperty" Title="Expand property" ExtensionVersion="0.9.0">
    <Syntaxes>
      <Syntax>auto-property</Syntax>
    </Syntaxes>
  </Refactoring>
  <Refactoring Id="ExpandPropertyAndAddBackingField" Title="Expand property and add backing field" ExtensionVersion="0.9.0">
    <Syntaxes>
      <Syntax>auto-property</Syntax>
    </Syntaxes>
  </Refactoring>
  <Refactoring Id="ExtractDeclarationFromUsingStatement" Title="Extract declaration from using statement" ExtensionVersion="0.9.0">
    <Syntaxes>
      <Syntax>using statement</Syntax>
    </Syntaxes>
    <Scope>declaration</Scope>
  </Refactoring>
  <Refactoring Id="ExtractExpressionFromParentheses" Title="Extract expression from parentheses" ExtensionVersion="0.9.0">
    <Syntaxes>
      <Syntax>parenthesized expression</Syntax>
    </Syntaxes>
    <Scope>opening/closing parenthesis</Scope>
  </Refactoring>
  <Refactoring Id="ExtractGenericType" Title="Extract generic type" ExtensionVersion="0.9.0">
    <Syntaxes>
      <Syntax>generic name (with single type argument)</Syntax>
    </Syntaxes>
    <Scope>type argument</Scope>
  </Refactoring>
  <Refactoring Id="ExtractStatement" Title="Extract statement(s)" ExtensionVersion="0.9.0">
    <Syntaxes>
      <Syntax>else clause</Syntax>
      <Syntax>fixed statement</Syntax>
      <Syntax>for statement</Syntax>
      <Syntax>foreach statement</Syntax>
      <Syntax>checked statement</Syntax>
      <Syntax>if statement</Syntax>
      <Syntax>lock statement</Syntax>
      <Syntax>try statement</Syntax>
      <Syntax>unsafe statement</Syntax>
      <Syntax>using statement</Syntax>
      <Syntax>while statement</Syntax>
    </Syntaxes>
  </Refactoring>

  <Refactoring Id="FormatArgumentList" Title="Format argument list" ExtensionVersion="0.9.0">
    <Syntaxes>
      <Syntax>argument list</Syntax>
    </Syntaxes>
    <Images>
      <Image>FormatEachArgumentOnSeparateLine</Image>
      <Image>FormatAllArgumentsOnSingleLine</Image>
    </Images>
  </Refactoring>
  <Refactoring Id="FormatParameterList" Title="Format parameter list" ExtensionVersion="0.9.0">
    <Syntaxes>
      <Syntax>parameter list</Syntax>
    </Syntaxes>
    <Images>
      <Image>FormatEachParameterOnSeparateLine</Image>
      <Image>FormatAllParametersOnSingleLine</Image>
    </Images>
  </Refactoring>
  <Refactoring Id="FormatBinaryExpression" Title="Format binary expression" ExtensionVersion="0.9.0">
    <Syntaxes>
      <Syntax>do statement</Syntax>
      <Syntax>if statement</Syntax>
      <Syntax>while statement</Syntax>
    </Syntaxes>
    <Scope>condition</Scope>
    <Images>
      <Image>FormatBinaryExpressionOnMultipleLines</Image>
    </Images>
  </Refactoring>
  <Refactoring Id="FormatAccessorBraces" Title="Format accessor braces" ExtensionVersion="0.9.50">
    <Syntaxes>
      <Syntax>get accessor</Syntax>
      <Syntax>set accessor</Syntax>
      <Syntax>add accessor</Syntax>
      <Syntax>remove accessor</Syntax>
    </Syntaxes>
    <Scope>block</Scope>
    <Images>
      <Image>FormatAccessorBracesOnMultipleLines</Image>
      <Image>FormatAccessorBracesOnSingleLine</Image>
    </Images>
  </Refactoring>
  <Refactoring Id="FormatConditionalExpression" Title="Format conditional expression" ExtensionVersion="0.9.0">
    <Syntaxes>
      <Syntax>conditional expression</Syntax>
    </Syntaxes>
    <Images>
      <Image>FormatConditionalExpressionOnMultipleLines</Image>
      <Image>FormatConditionalExpressionOnSingleLine</Image>
    </Images>
  </Refactoring>
  <Refactoring Id="FormatExpressionChain" Title="Format expression chain" ExtensionVersion="0.9.0">
    <Syntaxes>
      <Syntax>expression chain</Syntax>
    </Syntaxes>
    <Images>
      <Image>FormatExpressionChainOnMultipleLines</Image>
      <Image>FormatExpressionChainOnSingleLine</Image>
    </Images>
  </Refactoring>
  <Refactoring Id="FormatInitializer" Title="Format initializer" ExtensionVersion="0.9.0">
    <Syntaxes>
      <Syntax>initializer</Syntax>
    </Syntaxes>
    <Images>
      <Image>FormatInitializerOnMultipleLines</Image>
      <Image>FormatInitializerOnSingleLine</Image>
    </Images>
  </Refactoring>
  <Refactoring Id="GenerateSwitchSections" Title="Generate switch sections" ExtensionVersion="0.9.70">
    <Syntaxes>
      <Syntax>switch statement (that is empty or contains only default section)</Syntax>
    </Syntaxes>
  </Refactoring>
  <Refactoring Id="ReplaceExplicitTypeWithVar" Title="Replace explicit type with 'var'" ExtensionVersion="0.9.0">
    <Syntaxes>
      <Syntax>variable declaration</Syntax>
      <Syntax>foreach statement</Syntax>
    </Syntaxes>
    <Scope>type</Scope>
  </Refactoring>
  <Refactoring Id="ChangeMemberTypeAccordingToReturnExpression" Title="Change method/property/indexer type according to return expression" ExtensionVersion="0.9.40">
    <Syntaxes>
      <Syntax>return statement in method/property/indexer</Syntax>
    </Syntaxes>
  </Refactoring>
  <Refactoring Id="ChangeMemberTypeAccordingToYieldReturnExpression" Title="Change method/property/indexer type according to yield return expression" ExtensionVersion="0.9.50">
    <Syntaxes>
      <Syntax>yield return statement in method/property/indexer</Syntax>
    </Syntaxes>
  </Refactoring>
  <Refactoring Id="ReplaceVarWithExplicitType" Title="Replace 'var' with explicit type" ExtensionVersion="0.9.0">
    <Syntaxes>
      <Syntax>variable declaration</Syntax>
      <Syntax>foreach statetement</Syntax>
    </Syntaxes>
    <Scope>type</Scope>
  </Refactoring>
  <Refactoring Id="ChangeTypeAccordingToExpression" Title="Change type according to expression" ExtensionVersion="0.9.0">
    <Syntaxes>
      <Syntax>variable declaration</Syntax>
      <Syntax>foreach statement</Syntax>
    </Syntaxes> 
    <Scope>type</Scope>
    <Images>
      <Image>ChangeTypeAccordingToExpression</Image>
      <Image>ChangeForEachTypeAccordingToExpression</Image>
    </Images>
  </Refactoring>
  <Refactoring Id="CheckParameterForNull" Title="Check parameter for null" ExtensionVersion="0.9.0">
    <Syntaxes>
      <Syntax>parameter</Syntax>
    </Syntaxes>
    <Scope>parameter identifier</Scope>
  </Refactoring>
  <Refactoring Id="IntroduceConstructor" Title="Introduce constructor from selected member(s)" IsEnabledByDefault="false" ExtensionVersion="0.9.40">
    <Syntaxes>
      <Syntax>field</Syntax>
      <Syntax>property</Syntax>
    </Syntaxes>
    <Scope></Scope>
  </Refactoring>
  <Refactoring Id="MakeMemberAbstract" Title="Make member abstract" ExtensionVersion="0.9.0">
    <Syntaxes>
      <Syntax>non-abstract indexer/method/property in abstract class</Syntax>
    </Syntaxes>
    <Scope>indexer/method/property header</Scope>
  </Refactoring>
  <Refactoring Id="MarkAllMembersAsStatic" Title="Mark all members as static" ExtensionVersion="0.9.70">
    <Syntaxes>
      <Syntax>non-static field/method/property/event in static class</Syntax>
    </Syntaxes>
  </Refactoring>
  <Refactoring Id="MarkMemberAsStatic" Title="Mark member as static" ExtensionVersion="0.9.70">
    <Syntaxes>
      <Syntax>non-static field/method/property/event in static class</Syntax>
    </Syntaxes>
  </Refactoring>
  <Refactoring Id="MergeAttributes" Title="Merge attributes" ExtensionVersion="0.9.50">
    <Syntaxes>
      <Syntax>selected attribute lists</Syntax>
    </Syntaxes>
  </Refactoring>
  <Refactoring Id="MergeStringLiterals" Title="Merge string literals" ExtensionVersion="0.9.60">
    <Syntaxes>
      <Syntax>concatenated string literals</Syntax>
    </Syntaxes>
  </Refactoring>
  <Refactoring Id="MergeStringLiteralsIntoMultilineStringLiteral" Title="Merge string literals into multiline string literal" ExtensionVersion="0.9.60">
    <Syntaxes>
      <Syntax>concatenated string literals</Syntax>
    </Syntaxes>
  </Refactoring>
  <Refactoring Id="NegateBinaryExpression" Title="Negate binary expression" ExtensionVersion="0.9.0">
    <Syntaxes>
      <Syntax>logical and/or expression</Syntax>
    </Syntaxes>
  </Refactoring>
  <Refactoring Id="NegateBooleanLiteral" Title="Negate boolean literal" ExtensionVersion="0.9.0">
    <Syntaxes>
      <Syntax>boolean literal</Syntax>
    </Syntaxes>
  </Refactoring>
  <Refactoring Id="NegateOperator" Title="Negate operator" ExtensionVersion="0.9.0">
    <Syntaxes>
      <Syntax>!=</Syntax>
      <Syntax>&amp;&amp;</Syntax>
      <Syntax>||</Syntax>
      <Syntax>&lt;</Syntax>
      <Syntax>&lt;=</Syntax>
      <Syntax>==</Syntax>
      <Syntax>&gt;</Syntax>
      <Syntax>&gt;=</Syntax>
    </Syntaxes>
  </Refactoring>
  <Refactoring Id="NotifyPropertyChanged" Title="Notify property changed" ExtensionVersion="0.9.50">
    <Syntaxes>
      <Syntax>property in class/struct that implements INotifyPropertyChanged</Syntax>
    </Syntaxes>
    <Scope>setter</Scope>
  </Refactoring>
  <Refactoring Id="RemoveAllComments" Title="Remove all comments" ExtensionVersion="0.9.0">
    <Syntaxes>
      <Syntax>singleline/multiline comment</Syntax>
      <Syntax>singleline/multiline xml documentation comment</Syntax>
    </Syntaxes>
  </Refactoring>
  <Refactoring Id="RemoveAllCommentsExceptXmlComments" Title="Remove all comments (except xml comments)" ExtensionVersion="0.9.0">
    <Syntaxes>
      <Syntax>singleline/multiline comment</Syntax>
    </Syntaxes>
  </Refactoring>
  <Refactoring Id="RemoveAllRegions" Title="Remove all regions" ExtensionVersion="0.9.0">
    <Syntaxes>
      <Syntax>region directive</Syntax>
    </Syntaxes>
  </Refactoring>
  <Refactoring Id="ReplaceBlockWithEmbeddedStatementInIfElse" Title="Replace block with embedded statement (in if-else)" ExtensionVersion="0.9.0">
    <Syntaxes>
      <Syntax>if-else chain</Syntax>
    </Syntaxes>
    <Scope>topmost if keyword</Scope>
  </Refactoring>
  <Refactoring Id="ReplaceBlockWithEmbeddedStatement" Title="Replace block with embedded statement" ExtensionVersion="0.9.0">
    <Syntaxes>
      <Syntax>do statement</Syntax>
      <Syntax>else clause</Syntax>
      <Syntax>fixed statement</Syntax>
      <Syntax>for statement</Syntax>
      <Syntax>foreach statement</Syntax>
      <Syntax>if statement</Syntax>
      <Syntax>lock statement</Syntax>
      <Syntax>using statement</Syntax>
      <Syntax>while statement</Syntax>
    </Syntaxes>
    <Scope>block with a single statement</Scope>
  </Refactoring>
  <Refactoring Id="ReplaceSwitchSectionBlockWithStatements" Title="Replace switch section block with statements" ExtensionVersion="0.9.0">
    <Syntaxes>
      <Syntax>switch section</Syntax>
    </Syntaxes>
    <Scope>block</Scope>
  </Refactoring>
  <Refactoring Id="ReplaceBlockWithStatementsInEachSection" Title="Replace block with statements (in each section)" ExtensionVersion="0.9.0">
    <Syntaxes>
      <Syntax>switch statement</Syntax>
    </Syntaxes>
    <Scope>switch keyword</Scope>
  </Refactoring>
  <Refactoring Id="RemoveComment" Title="Remove comment" ExtensionVersion="0.9.0">
    <Syntaxes>
      <Syntax>singleline/multiline comment</Syntax>
      <Syntax>singleline/multiline xml documentation comment</Syntax>
    </Syntaxes>
  </Refactoring>
  <Refactoring Id="RemoveMember" Title="Remove member" ExtensionVersion="0.9.0">
    <Syntaxes>
      <Syntax>method</Syntax>
      <Syntax>constructor</Syntax>
      <Syntax>property</Syntax>
      <Syntax>indexer</Syntax>
      <Syntax>operator</Syntax>
      <Syntax>event</Syntax>
      <Syntax>namespace</Syntax>
      <Syntax>class</Syntax>
      <Syntax>struct</Syntax>
      <Syntax>interface</Syntax>
    </Syntaxes>
    <Scope>opening or closing brace</Scope>
  </Refactoring>
  <Refactoring Id="RemoveParameterNameFromArgument" Title="Remove parameter name from argument" ExtensionVersion="0.9.0">
    <Syntaxes>
      <Syntax>selected argument(s)</Syntax>
    </Syntaxes>
  </Refactoring>
  <Refactoring Id="RemovePropertyInitializer" Title="Remove property initializer" ExtensionVersion="0.9.0">
    <Syntaxes>
      <Syntax>property initializer</Syntax>
    </Syntaxes>
  </Refactoring>
  <Refactoring Id="RenameBackingFieldAccordingToPropertyName" Title="Rename backing field according to property name" ExtensionVersion="0.9.0">
    <Syntaxes>
      <Syntax>backing field</Syntax>
    </Syntaxes>
    <Scope>property declaration</Scope>
  </Refactoring>
  <Refactoring Id="RenameIdentifierAccordingToTypeName" Title="Rename identifier according to type name" ExtensionVersion="0.9.0">
    <Syntaxes>
      <Syntax>foreach statement</Syntax>
      <Syntax>local/field/constant declaration</Syntax>
    </Syntaxes>
    <Scope>identifier</Scope>
    <Images>
      <Image>RenameForEachIdentifierAccordingToTypeName</Image>
      <Image>RenameFieldIdentifierAccordingToTypeName</Image>
    </Images>
  </Refactoring>
  <Refactoring Id="RenameMethodAccordingToTypeName" Title="Rename method according to type name" ExtensionVersion="0.9.0">
    <Syntaxes>
      <Syntax>method</Syntax>
    </Syntaxes>
  </Refactoring>
  <Refactoring Id="RenameParameterAccordingToTypeName" Title="Rename parameter according to its type name" ExtensionVersion="0.9.0">
    <Syntaxes>
      <Syntax>parameter</Syntax>
    </Syntaxes>
    <Scope>parameter identifier</Scope>
  </Refactoring>
  <Refactoring Id="RenamePropertyAccordingToTypeName" Title="Rename property according to type name" ExtensionVersion="0.9.0">
    <Syntaxes>
      <Syntax>property identifier</Syntax>
    </Syntaxes>
  </Refactoring>
  <Refactoring Id="ReverseForLoop" Title="Reverse for loop" ExtensionVersion="0.9.0">
    <Syntaxes>
      <Syntax>for statement</Syntax>
    </Syntaxes>
    <Scope>for keyword</Scope>
  </Refactoring>
  <Refactoring Id="SimplifyLambdaExpression" Title="Simplify lambda expression" ExtensionVersion="0.9.80">
    <Syntaxes>
      <Syntax>lambda expression with block with single single-line statement</Syntax>
    </Syntaxes>
    <Scope>body</Scope>
  </Refactoring>
  <Refactoring Id="SplitAttributes" Title="Split attributes" ExtensionVersion="0.9.50">
    <Syntaxes>
      <Syntax>selected attribute list</Syntax>
    </Syntaxes>
  </Refactoring>
  <Refactoring Id="SwapExpressionsInBinaryExpression" Title="Swap expressions in binary expression" ExtensionVersion="0.9.40">
    <Syntaxes>
      <Syntax>logical and/or expression</Syntax>
    </Syntaxes>
    <Scope>binary operator</Scope>
  </Refactoring>
  <Refactoring Id="SwapExpressionsInConditionalExpression" Title="Swap expressions in conditional expression" ExtensionVersion="0.9.0">
    <Syntaxes>
      <Syntax>conditional expression</Syntax>
    </Syntaxes>
    <Scope>condition</Scope>
  </Refactoring>
  <Refactoring Id="SwapStatementsInIfElse" Title="Swap statements in if-else" ExtensionVersion="0.9.0">
    <Syntaxes>
      <Syntax>if statement</Syntax>
    </Syntaxes>
    <Scope>if keyword</Scope>
  </Refactoring>
  <Refactoring Id="SwapMembers" Title="Swap members" ExtensionVersion="0.9.50">
    <Syntaxes>
      <Syntax>empty line between member declarations</Syntax>
    </Syntaxes>
  </Refactoring>
  <Refactoring Id="Uncomment" Title="Uncomment" ExtensionVersion="0.9.0">
    <Syntaxes>
      <Syntax>single-line comment(s)</Syntax>
    </Syntaxes>
  </Refactoring>
  <Refactoring Id="UseExpressionBodiedMember" Title="Use expression-bodied member" ExtensionVersion="0.9.60">
    <Syntaxes>
      <Syntax>method</Syntax>
      <Syntax>property</Syntax>
      <Syntax>indexer</Syntax>
      <Syntax>operator</Syntax>
    </Syntaxes>
    <Scope>body or accessor list</Scope>
  </Refactoring>
</Refactorings>