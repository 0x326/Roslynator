<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="14.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <Import Project="$(MSBuildExtensionsPath)\$(MSBuildToolsVersion)\Microsoft.Common.props" Condition="Exists('$(MSBuildExtensionsPath)\$(MSBuildToolsVersion)\Microsoft.Common.props')" />
  <PropertyGroup>
    <MinimumVisualStudioVersion>11.0</MinimumVisualStudioVersion>
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
    <ProjectGuid>{3AD7B124-7B99-440D-84A1-858BE5AE268B}</ProjectGuid>
    <OutputType>Library</OutputType>
    <AppDesignerFolder>Properties</AppDesignerFolder>
    <RootNamespace>Pihrtsoft.CodeAnalysis.CSharp</RootNamespace>
    <AssemblyName>Pihrtsoft.CodeAnalysis.CSharp.Refactorings</AssemblyName>
    <ProjectTypeGuids>{786C830F-07A1-408B-BD7F-6EE04809D6DB};{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}</ProjectTypeGuids>
    <TargetFrameworkProfile>Profile7</TargetFrameworkProfile>
    <TargetFrameworkVersion>v4.5</TargetFrameworkVersion>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Debug|AnyCPU' ">
    <DebugSymbols>true</DebugSymbols>
    <DebugType>full</DebugType>
    <Optimize>false</Optimize>
    <OutputPath>bin\Debug\</OutputPath>
    <DefineConstants>DEBUG;TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
    <CodeAnalysisRuleSet>..\..\Pihrtsoft.CodeAnalysis.ruleset</CodeAnalysisRuleSet>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Release|AnyCPU' ">
    <DebugType>pdbonly</DebugType>
    <Optimize>true</Optimize>
    <OutputPath>bin\Release\</OutputPath>
    <DefineConstants>TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
    <CodeAnalysisRuleSet>..\..\Pihrtsoft.CodeAnalysis.ruleset</CodeAnalysisRuleSet>
    <AllowUnsafeBlocks>false</AllowUnsafeBlocks>
  </PropertyGroup>
  <PropertyGroup>
    <SignAssembly>true</SignAssembly>
  </PropertyGroup>
  <PropertyGroup>
    <AssemblyOriginatorKeyFile>Pihrtsoft.CodeAnalysis.CSharp.Refactorings.snk</AssemblyOriginatorKeyFile>
  </PropertyGroup>
  <ItemGroup>
    <Compile Include="RefactoringIdentifiers.cs" />
    <Compile Include="RefactoringIdentifierSet.cs" />
    <Compile Include="RefactoringSettings.cs" />
    <Compile Include="Refactoring\AddDefaultValueToParameterRefactoring.cs" />
    <Compile Include="Refactoring\AnonymousMethodExpressionRefactoring.cs" />
    <Compile Include="Refactoring\AttributeArgumentParameterNameRefactoring.cs" />
    <Compile Include="Refactoring\AttributeArgumentListRefactoring.cs" />
    <Compile Include="Refactoring\CommentOutRefactoring.cs" />
    <Compile Include="Refactoring\DuplicateAttributeArgumentRefactoring.cs" />
    <Compile Include="Refactoring\CaseSwitchLabelRefactoring.cs" />
    <Compile Include="Refactoring\EventFieldDeclarationRefactoring.cs" />
    <Compile Include="Refactoring\RefactoringHelper.cs" />
    <Compile Include="Refactoring\ReplaceCountWithLengthOrLengthWithCountRefactoring.cs" />
    <Compile Include="Refactoring\StatementRefactoring.cs" />
    <Compile Include="Refactoring\FormatAttributeArgumentListRefactoring.cs" />
    <Compile Include="Refactoring\ElseClauseRefactoring.cs" />
    <Compile Include="Refactoring\ReplaceEnumHasFlagWithBitwiseOperationRefactoring.cs" />
    <Compile Include="Refactoring\IntroduceUsingStaticDirectiveRefactoring.cs" />
    <Compile Include="Refactoring\IndexerDeclarationRefactoring.cs" />
    <Compile Include="Refactoring\ChangeMethodReturnTypeToVoidRefactoring.cs" />
    <Compile Include="Refactoring\MethodDeclarationRefactoring.cs" />
    <Compile Include="Refactoring\ReplaceWhileStatementWithDoStatementRefactoring.cs" />
    <Compile Include="Refactoring\ReplaceDoStatementWithWhileStatementRefactoring.cs" />
    <Compile Include="Refactoring\ChangeVariableDeclarationTypeRefactoring.cs" />
    <Compile Include="Refactoring\InitializeLocalWithDefaultValueRefactoring.cs" />
    <Compile Include="Refactoring\WrapDeclarationInUsingStatementRefactoring.cs" />
    <Compile Include="Refactoring\FormatConditionalExpressionOnMultipleLinesRefactoring.cs" />
    <Compile Include="Refactoring\FormatConditionalExpressionOnSingleLineRefactoring.cs" />
    <Compile Include="Refactoring\MergeStringLiteralsRefactoring.cs" />
    <Compile Include="Refactoring\RemoveCommentsRefactoring.cs" />
    <Compile Include="Refactoring\RemoveCommentRefactoring.cs" />
    <Compile Include="Refactoring\ReplaceStringLiteralRefactoring.cs" />
    <Compile Include="Refactoring\RemovePropertyInitializerRefactoring.cs" />
    <Compile Include="Refactoring\ReplaceSwitchSectionStatementsWithBlockRefactoring.cs" />
    <Compile Include="Refactoring\ArgumentParameterNameRefactoring.cs" />
    <Compile Include="Refactoring\ReplaceConstantWithFieldRefactoring.cs" />
    <Compile Include="Refactoring\ReplaceFieldWithConstantRefactoring.cs" />
    <Compile Include="Refactoring\ReplaceMethodWithPropertyRefactoring.cs" />
    <Compile Include="Refactoring\ReplacePropertyWithMethodRefactoring.cs" />
    <Compile Include="Refactoring\ExpandPropertyAndAddBackingFieldRefactoring.cs" />
    <Compile Include="Refactoring\ExpandPropertyRefactoring.cs" />
    <Compile Include="Refactoring\ExtractDeclarationFromUsingStatementRefactoring.cs" />
    <Compile Include="Refactoring\ExtractExpressionFromParenthesesRefactoring.cs" />
    <Compile Include="Refactoring\ExtractGenericTypeRefactoring.cs" />
    <Compile Include="Refactoring\FormatArgumentListRefactoring.cs" />
    <Compile Include="Refactoring\FormatInitializerOnMultipleLinesRefactoring.cs" />
    <Compile Include="Refactoring\FormatInitializerOnSingleLineRefactoring.cs" />
    <Compile Include="Refactoring\FormatParameterListRefactoring.cs" />
    <Compile Include="Refactoring\LambdaExpressionRefactoring.cs" />
    <Compile Include="Refactoring\ReplaceAnyWithAllOrAllWithAnyRefactoring.cs" />
    <Compile Include="Refactoring\NegateBinaryExpressionRefactoring.cs" />
    <Compile Include="Refactoring\NegateBooleanLiteralRefactoring.cs" />
    <Compile Include="Refactoring\RemoveAllRegionsRefactoring.cs" />
    <Compile Include="Refactoring\ReplaceSwitchSectionBlockWithStatementsRefactoring.cs" />
    <Compile Include="Refactoring\ReplaceBlockWithStatementsInEachSectionRefactoring.cs" />
    <Compile Include="Refactoring\ReplaceStatementsWithBlockInEachSectionRefactoring.cs" />
    <Compile Include="Refactoring\SortSwitchSectionsRefactoring.cs" />
    <Compile Include="Refactoring\AddInterpolationRefactoring.cs" />
    <Compile Include="Refactoring\DefaultCodeRefactoringProvider.cs" />
    <Compile Include="Refactoring\WrapExpressionInParenthesesRefactoring.cs" />
    <Compile Include="Refactoring\InterpolatedStringTextRefactoring.cs" />
    <Compile Include="Refactoring\RemoveAllStatementsRefactoring.cs" />
    <Compile Include="Refactoring\MarkAllMembersAsStaticRefactoring.cs" />
    <Compile Include="Refactoring\MarkMemberAsStaticRefactoring.cs" />
    <Compile Include="Refactoring\FormatAccessorBraceOnSingleLineRefactoring.cs" />
    <Compile Include="Refactoring\RefactoringContextExtensions.cs" />
    <Compile Include="Refactoring\RefactoringContext.cs" />
    <Compile Include="Refactoring\InterpolatedStringRefactoring.cs" />
    <Compile Include="Refactoring\GenerateSwitchSectionsRefactoring.cs" />
    <Compile Include="Refactoring\YieldReturnStatementRefactoring.cs" />
    <Compile Include="Refactoring\ReturnStatementRefactoring.cs" />
    <Compile Include="Refactoring\ExpandLambdaExpressionBodyRefactoring.cs" />
    <Compile Include="Refactoring\InitializerExpressionRefactoring.cs" />
    <Compile Include="Refactoring\BinaryExpressionRefactoring.cs" />
    <Compile Include="Refactoring\FieldDeclarationRefactoring.cs" />
    <Compile Include="Refactoring\GenericNameRefactoring.cs" />
    <Compile Include="Refactoring\IdentifierNameRefactoring.cs" />
    <Compile Include="Refactoring\IntroduceConstructorRefactoring.cs" />
    <Compile Include="Refactoring\InvocationExpressionRefactoring.cs" />
    <Compile Include="Refactoring\LocalDeclarationStatementRefactoring.cs" />
    <Compile Include="Refactoring\ReplaceStringFormatWithInterpolatedStringRefactoring.cs" />
    <Compile Include="Refactoring\DoStatementRefactoring.cs" />
    <Compile Include="Refactoring\ArrowExpressionClauseRefactoring.cs" />
    <Compile Include="Refactoring\ForStatementRefactoring.cs" />
    <Compile Include="Refactoring\SimpleMemberAccessExpressionRefactoring.cs" />
    <Compile Include="Refactoring\ParenthesizedExpressionRefactoring.cs" />
    <Compile Include="Refactoring\IfStatementRefactoring.cs" />
    <Compile Include="Refactoring\RegionDirectiveTriviaRefactoring.cs" />
    <Compile Include="Refactoring\ExpressionRefactoring.cs" />
    <Compile Include="Refactoring\SwapExpressionsInConditionalExpressionRefactoring.cs" />
    <Compile Include="Refactoring\SwapStatementInIfElseRefactoring.cs" />
    <Compile Include="Refactoring\UncommentRefactoring.cs" />
    <Compile Include="IfElseChainAnalysisResult.cs" />
    <Compile Include="Refactoring\ReplaceEmbeddedStatementWithBlockRefactoring.cs" />
    <Compile Include="Refactoring\AddCastExpressionRefactoring.cs" />
    <Compile Include="Refactoring\CheckParameterForNullRefactoring.cs" />
    <Compile Include="Refactoring\ArgumentRefactoring.cs" />
    <Compile Include="Refactoring\AccessorDeclarationRefactoring.cs" />
    <Compile Include="Refactoring\AssignmentExpressionRefactoring.cs" />
    <Compile Include="Refactoring\DuplicateArgumentRefactoring.cs" />
    <Compile Include="Refactoring\ExpandInitializerRefactoring.cs" />
    <Compile Include="Refactoring\FormatAccessorBraceOnMultipleLinesRefactoring.cs" />
    <Compile Include="Refactoring\NotifyPropertyChangedRefactoring.cs" />
    <Compile Include="Refactoring\SplitAttributesRefactoring.cs" />
    <Compile Include="Refactoring\MergeAttributesRefactoring.cs" />
    <Compile Include="Refactoring\ReplaceMethodInvocationWithElementAccessRefactoring.cs" />
    <Compile Include="Refactoring\DuplicateParameterRefactoring.cs" />
    <Compile Include="Refactoring\ExpandCoalesceExpressionRefactoring.cs" />
    <Compile Include="Refactoring\AddBooleanComparisonRefactoring.cs" />
    <Compile Include="Refactoring\ExpandEventRefactoring.cs" />
    <Compile Include="Refactoring\PropertyDeclarationRefactoring.cs" />
    <Compile Include="Refactoring\StringLiteralExpressionRefactoring.cs" />
    <Compile Include="Refactoring\ExpandExpressionBodiedMemberRefactoring.cs" />
    <Compile Include="Refactoring\FormatExpressionChainRefactoring.cs" />
    <Compile Include="Refactoring\ExtractStatementRefactoring.cs" />
    <Compile Include="Refactoring\FormatBinaryExpressionRefactoring.cs" />
    <Compile Include="Refactoring\MakeMemberAbstractRefactoring.cs" />
    <Compile Include="Refactoring\ReplaceBlockWithEmbeddedStatementRefactoring.cs" />
    <Compile Include="Refactoring\RemoveModifierRefactoring.cs" />
    <Compile Include="Refactoring\AddOrRenameParameterRefactoring.cs" />
    <Compile Include="Refactoring\ReplaceSwitchWithIfElseRefactoring.cs" />
    <Compile Include="Refactoring\CloseParenTokenRefactoring.cs" />
    <Compile Include="Refactoring\PostfixUnaryExpressionRefactoring.cs" />
    <Compile Include="Refactoring\PrefixUnaryExpressionRefactoring.cs" />
    <Compile Include="Refactoring\CommaTokenRefactoring.cs" />
    <Compile Include="Refactoring\CommentTriviaRefactoring.cs" />
    <Compile Include="Refactoring\ParameterRefactoring.cs" />
    <Compile Include="Refactoring\LiteralExpressionRefactoring.cs" />
    <Compile Include="Refactoring\VariableDeclarationRefactoring.cs" />
    <Compile Include="Refactoring\NegateOperatorRefactoring.cs" />
    <Compile Include="Refactoring\UsingStatementRefactoring.cs" />
    <Compile Include="Refactoring\WhileStatementRefactoring.cs" />
    <Compile Include="Refactoring\ForEachStatementRefactoring.cs" />
    <Compile Include="Refactoring\ParameterListRefactoring.cs" />
    <Compile Include="Refactoring\ArgumentListRefactoring.cs" />
    <Compile Include="Refactoring\ConditionalExpressionRefactoring.cs" />
    <Compile Include="Refactoring\SwitchStatementRefactoring.cs" />
    <Compile Include="Refactoring\SwitchSectionRefactoring.cs" />
    <Compile Include="Refactoring\ReorderMembersRefactoring.cs" />
    <Compile Include="Refactoring\ReplaceConditionalExpressionWithIfElseRefactoring.cs" />
    <Compile Include="Refactoring\ReverseForRefactoring.cs" />
    <Compile Include="Refactoring\ReplaceForWithForEachRefactoring.cs" />
    <Compile Include="Refactoring\SwapExpressionsRefactoring.cs" />
    <Compile Include="Refactoring\SwapMembersRefactoring.cs" />
    <Compile Include="StringLiteralChain.cs" />
    <Compile Include="SyntaxHelper.cs" />
    <Compile Include="SyntaxRewriters\InterpolatedStringSyntaxRewriter.cs" />
    <Compile Include="Properties\AssemblyInfo.cs" />
    <Compile Include="Refactoring\MemberDeclarationRefactoring.cs" />
  </ItemGroup>
  <ItemGroup>
    <None Include="app.config" />
    <None Include="packages.config" />
    <None Include="Pihrtsoft.CodeAnalysis.CSharp.Refactorings.snk" />
  </ItemGroup>
  <ItemGroup>
    <Reference Include="Microsoft.CodeAnalysis, Version=1.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35, processorArchitecture=MSIL">
      <HintPath>..\..\packages\Microsoft.CodeAnalysis.Common.1.0.0\lib\portable-net45+win8\Microsoft.CodeAnalysis.dll</HintPath>
      <Private>False</Private>
    </Reference>
    <Reference Include="Microsoft.CodeAnalysis.CSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35, processorArchitecture=MSIL">
      <HintPath>..\..\packages\Microsoft.CodeAnalysis.CSharp.1.0.0\lib\portable-net45+win8\Microsoft.CodeAnalysis.CSharp.dll</HintPath>
      <Private>False</Private>
    </Reference>
    <Reference Include="Microsoft.CodeAnalysis.CSharp.Workspaces, Version=1.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35, processorArchitecture=MSIL">
      <HintPath>..\..\packages\Microsoft.CodeAnalysis.CSharp.Workspaces.1.0.0\lib\portable-net45+win8\Microsoft.CodeAnalysis.CSharp.Workspaces.dll</HintPath>
      <Private>False</Private>
    </Reference>
    <Reference Include="Microsoft.CodeAnalysis.Workspaces, Version=1.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35, processorArchitecture=MSIL">
      <HintPath>..\..\packages\Microsoft.CodeAnalysis.Workspaces.Common.1.0.0\lib\portable-net45+win8\Microsoft.CodeAnalysis.Workspaces.dll</HintPath>
      <Private>False</Private>
    </Reference>
    <Reference Include="System.Collections.Immutable, Version=1.1.36.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a, processorArchitecture=MSIL">
      <HintPath>..\..\packages\System.Collections.Immutable.1.1.36\lib\portable-net45+win8+wp8+wpa81\System.Collections.Immutable.dll</HintPath>
      <Private>False</Private>
    </Reference>
    <Reference Include="System.Composition.AttributedModel, Version=1.0.27.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a, processorArchitecture=MSIL">
      <HintPath>..\..\packages\Microsoft.Composition.1.0.27\lib\portable-net45+win8+wp8+wpa81\System.Composition.AttributedModel.dll</HintPath>
      <Private>False</Private>
    </Reference>
    <Reference Include="System.Composition.Convention, Version=1.0.27.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a, processorArchitecture=MSIL">
      <HintPath>..\..\packages\Microsoft.Composition.1.0.27\lib\portable-net45+win8+wp8+wpa81\System.Composition.Convention.dll</HintPath>
      <Private>False</Private>
    </Reference>
    <Reference Include="System.Composition.Hosting, Version=1.0.27.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a, processorArchitecture=MSIL">
      <HintPath>..\..\packages\Microsoft.Composition.1.0.27\lib\portable-net45+win8+wp8+wpa81\System.Composition.Hosting.dll</HintPath>
      <Private>False</Private>
    </Reference>
    <Reference Include="System.Composition.Runtime, Version=1.0.27.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a, processorArchitecture=MSIL">
      <HintPath>..\..\packages\Microsoft.Composition.1.0.27\lib\portable-net45+win8+wp8+wpa81\System.Composition.Runtime.dll</HintPath>
      <Private>False</Private>
    </Reference>
    <Reference Include="System.Composition.TypedParts, Version=1.0.27.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a, processorArchitecture=MSIL">
      <HintPath>..\..\packages\Microsoft.Composition.1.0.27\lib\portable-net45+win8+wp8+wpa81\System.Composition.TypedParts.dll</HintPath>
      <Private>False</Private>
    </Reference>
    <Reference Include="System.Reflection.Metadata, Version=1.0.21.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a, processorArchitecture=MSIL">
      <HintPath>..\..\packages\System.Reflection.Metadata.1.0.21\lib\portable-net45+win8\System.Reflection.Metadata.dll</HintPath>
      <Private>False</Private>
    </Reference>
  </ItemGroup>
  <ItemGroup>
    <ProjectReference Include="..\Pihrtsoft.CodeAnalysis.Common\Pihrtsoft.CodeAnalysis.Common.csproj">
      <Project>{34a3e42e-2254-4ee7-a152-eedb18e3d7e3}</Project>
      <Name>Pihrtsoft.CodeAnalysis.Common</Name>
    </ProjectReference>
  </ItemGroup>
  <ItemGroup>
    <Analyzer Include="..\..\packages\CSharpAnalyzers.0.9.80.0\analyzers\dotnet\cs\Pihrtsoft.CodeAnalysis.Common.dll" />
    <Analyzer Include="..\..\packages\CSharpAnalyzers.0.9.80.0\analyzers\dotnet\cs\Pihrtsoft.CodeAnalysis.CSharp.dll" />
    <Analyzer Include="..\..\packages\Microsoft.CodeAnalysis.Analyzers.1.0.0\analyzers\dotnet\cs\Microsoft.CodeAnalysis.Analyzers.dll" />
    <Analyzer Include="..\..\packages\Microsoft.CodeAnalysis.Analyzers.1.0.0\analyzers\dotnet\cs\Microsoft.CodeAnalysis.CSharp.Analyzers.dll" />
  </ItemGroup>
  <ItemGroup>
    <Content Include="Refactorings.xml">
      <SubType>Designer</SubType>
    </Content>
  </ItemGroup>
  <Import Project="$(MSBuildExtensionsPath32)\Microsoft\Portable\v4.6\Microsoft.Portable.CSharp.targets" />
  <Target Name="AfterBuild">
    <GetAssemblyIdentity AssemblyFiles="$(OutDir)\$(AssemblyName).dll">
      <Output TaskParameter="Assemblies" ItemName="AnalyzerAssemblyInfo" />
    </GetAssemblyIdentity>
  </Target>
  <!-- To modify your build process, add your task inside one of the targets below and uncomment it. 
       Other similar extension points exist, see Microsoft.Common.targets.
  <Target Name="BeforeBuild">
  </Target>
  <Target Name="AfterBuild">
  </Target>
  -->
</Project>