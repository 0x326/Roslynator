<!--Copyright (c) Josef Pihrt. All rights reserved. Licensed under the Apache License, Version 2.0.-->
<CodeSnippet Format="1.1.0" xmlns="http://schemas.microsoft.com/VisualStudio/2005/CodeSnippet">
  <Header>
    <Title>CodeRefactoringProvider Class</Title>
    <Shortcut>c_</Shortcut>
    <Description>Class derived from CodeRefactoringProvider.</Description>
    <Author>Josef Pihrt</Author>
    <SnippetTypes>
      <SnippetType>Expansion</SnippetType>
    </SnippetTypes>
  </Header>
  <Snippet>
    <Imports>
      <Import>
        <Namespace>System.Threading</Namespace>
      </Import>
      <Import>
        <Namespace>System.Threading.Tasks</Namespace>
      </Import>
      <Import>
        <Namespace>Microsoft.CodeAnalysis</Namespace>
      </Import>
      <Import>
        <Namespace>Microsoft.CodeAnalysis.CodeActions</Namespace>
      </Import>
      <Import>
        <Namespace>Microsoft.CodeAnalysis.CodeRefactorings</Namespace>
      </Import>
      <Import>
        <Namespace>Microsoft.CodeAnalysis.CSharp</Namespace>
      </Import>
      <Import>
        <Namespace>Microsoft.CodeAnalysis.CSharp.Syntax</Namespace>
      </Import>
      <Import>
        <Namespace>Microsoft.CodeAnalysis.Formatting</Namespace>
      </Import>
    </Imports>
    <Declarations>
      <Literal>
        <ID>createChangedDocument</ID>
        <ToolTip>createChangedDocument method name</ToolTip>
        <Default>CreateChangedDocument</Default>
      </Literal>
      <Literal>
        <ID>language</ID>
        <ToolTip>Language name</ToolTip>
        <Default>.CSharp</Default>
      </Literal>
      <Literal>
        <ID>name</ID>
        <ToolTip>CodeFixProvider name</ToolTip>
        <Default>Name</Default>
      </Literal>
      <Literal>
        <ID>node</ID>
        <ToolTip>Syntax type name</ToolTip>
        <Default>SyntaxNode</Default>
      </Literal>
      <Literal>
        <ID>title</ID>
        <ToolTip>Diagnostic title</ToolTip>
        <Default>Title</Default>
      </Literal>
    </Declarations>
    <Code Language="CSharp"><![CDATA[[ExportCodeRefactoringProvider(LanguageNames$language$, Name = nameof($name$CodeRefactoringProvider))]
public class $name$CodeRefactoringProvider : CodeRefactoringProvider
{
    public override async Task ComputeRefactoringsAsync(CodeRefactoringContext context)
    {
        SyntaxNode root = await context.Document.GetSyntaxRootAsync(context.CancellationToken);

        $node$ node = root.FindNode(context.Span, getInnermostNodeForTie: true)?.FirstAncestorOrSelf<$node$>();

        if (node == null)
            return;

        CodeAction codeAction = CodeAction.Create(
            "$title$",
            cancellationToken => $createChangedDocument$Async(context.Document, node, cancellationToken));

        context.RegisterRefactoring(codeAction);
    }

    private static async Task<Document> $createChangedDocument$Async(Document document, $node$ node, CancellationToken cancellationToken)
    {
        SyntaxNode root = await document.GetSyntaxRootAsync(cancellationToken).ConfigureAwait(false);

        $node$ newNode = node
            .WithAdditionalAnnotations(Formatter.Annotation);

        root = root.ReplaceNode(node, newNode);

        return document.WithSyntaxRoot(root);
    }
}$end$]]></Code>
  </Snippet>
</CodeSnippet>