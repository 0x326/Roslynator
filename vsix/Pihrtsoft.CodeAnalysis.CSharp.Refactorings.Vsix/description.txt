<h3>Introduction</h3>
<p>
    Roslyn-based extension that offers 90+ refactorings for C#. 
</p>

<h3>Links</h3>
<ul>
    <li>
        <a href="http://pihrt.net/Roslyn">C# Refactorings Website</a>
    </li>  
    <li>
        <a href="http://pihrt.net/Roslyn/Refactorings">List of Refactorings</a>
    </li>  
    <li>
        <a href="http://github.com/JosefPihrt/Pihrtsoft.CodeAnalysis/blob/master/ChangeLog.md">Release Notes</a>
    </li>  
</ul>

<h3>Related Products</h3>
<ul>
    <li>
        <a href="http://visualstudiogallery.msdn.microsoft.com/e83c5e41-92c5-42a3-80cc-e0720c621b5e">C# Analyzers and Refactorings</a>
        <span> - Visual Studio extension that contains analyzers and refactorings.</span>
    </li>  
    <li>
        <a href="http://www.nuget.org/packages/CSharpAnalyzers">CSharpAnalyzers</a>
        <span> - NuGet package that contains only analyzers.</span>
    </li>  
</ul>

<h3>List of refactorings</h3>

<ul>
        <li>Access element using &#39;[]&#39; instead of &#39;First/Last/ElementAt&#39; method</li>
        <li>Add boolean comparison</li>
        <li>Add braces to embedded statement</li>
        <li>Add braces to if-else chain</li>
        <li>Add braces to switch section</li>
        <li>Add braces to switch sections</li>
        <li>Add cast according to parameter type</li>
        <li>Add cast to assignment expression</li>
        <li>Add parameter name</li>
        <li>Add parameter name to each argument</li>
        <li>Add parentheses</li>
        <li>Add using statement</li>
        <li>Change &#39;Any/All&#39; to &#39;All/Any&#39;</li>
        <li>Change foreach variable&#39;s declared type according to expression</li>
        <li>Change foreach variable&#39;s declared type to implicit</li>
        <li>Change method/property/indexer type according to return statement</li>
        <li>Change method/property/indexer type according to yield return statement</li>
        <li>Change type</li>
        <li>Change type according to expression</li>
        <li>Check parameter for null</li>
        <li>Convert &quot;&quot; to string.Empty</li>
        <li>Convert conditional expression to if-else</li>
        <li>Convert constant to read-only field</li>
        <li>Convert for to foreach</li>
        <li>Convert foreach to for</li>
        <li>Convert interpolated string to string literal</li>
        <li>Convert method to read-only property</li>
        <li>Convert read-only field to constant</li>
        <li>Convert read-only property to method</li>
        <li>Convert string literal to interpolated string</li>
        <li>Convert string.Empty to &quot;&quot;</li>
        <li>Convert switch to if-else chain</li>
        <li>Convert to increment/decrement operator</li>
        <li>Convert to interpolated string</li>
        <li>Convert to prefix/postfix operator</li>
        <li>Duplicate member</li>
        <li>Duplicate parameter</li>
        <li>Expand assignment expression</li>
        <li>Expand coalesce expression</li>
        <li>Expand event</li>
        <li>Expand expression-bodied member</li>
        <li>Expand lambda expression&#39;s body</li>
        <li>Expand object initializer</li>
        <li>Expand property</li>
        <li>Expand property and add backing field</li>
        <li>Extract declaration from using statement</li>
        <li>Extract expression from parentheses</li>
        <li>Extract generic type</li>
        <li>Extract statement(s)</li>
        <li>Format accessor braces on multiple lines</li>
        <li>Format all arguments on a single line</li>
        <li>Format all parameters on a single line</li>
        <li>Format binary expressions on multiple lines</li>
        <li>Format conditional expression on multiple lines</li>
        <li>Format conditional expression to a single line</li>
        <li>Format each argument on separate line</li>
        <li>Format each parameter on separate line</li>
        <li>Format expression chain on a single line</li>
        <li>Format expression chain on multiple lines</li>
        <li>Format initializer on a single line</li>
        <li>Format initializer on multiple lines</li>
        <li>Introduce constructor from selected member(s)</li>
        <li>Make member abstract</li>
        <li>Merge attributes</li>
        <li>Negate binary expression</li>
        <li>Negate boolean literal</li>
        <li>Negate operator</li>
        <li>Notify property changed</li>
        <li>Remove all comments</li>
        <li>Remove all comments (except xml comments)</li>
        <li>Remove all regions</li>
        <li>Remove braces from if-else chain</li>
        <li>Remove braces from switch section</li>
        <li>Remove braces from switch sections</li>
        <li>Remove comment</li>
        <li>Remove member</li>
        <li>Remove parameter name</li>
        <li>Remove parameter name from each argument</li>
        <li>Remove property initializer</li>
        <li>Rename backing field according to property name</li>
        <li>Rename foreach variable according to its type name</li>
        <li>Rename local/field/const according to type name</li>
        <li>Rename method according to type name</li>
        <li>Rename parameter according to its type name</li>
        <li>Rename property according to type name</li>
        <li>Reverse for loop</li>
        <li>Split attributes</li>
        <li>Swap arguments</li>
        <li>Swap binary expression&#39;s expressions</li>
        <li>Swap conditional expression&#39;s statements</li>
        <li>Swap if-else statements</li>
        <li>Swap members</li>
        <li>Swap parameters</li>
        <li>Uncomment</li>

</ul>